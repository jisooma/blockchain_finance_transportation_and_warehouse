package org.fisco.bcos.temp;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.Bool;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple10;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple6;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tuples.generated.Tuple8;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Test3 extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","","","8152906040526040518082805190602001908083835b6020831015156150185780518252602082019150602081019050602083039250614ff3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160405160200180828054600181600116156101000203166002900480156150e85780601f106150c65761010080835404028352918201916150e8565b820191906000526020600020905b8154815290600101906020018083116150d4575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515615131578051825260208201915060208101905060208303925061510c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561516e57600080fd5b60405160200180807fe794b3e8afb7e4b8ad000000000000000000000000000000000000000000000081525060090190506040516020818303038152906040526040518082805190602001908083835b6020831015156151e357805182526020820191506020810190506020830392506151be565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166008600086815260200190815260200160002060030160405160200180828054600181600116156101000203166002900480156152885780601f10615266576101008083540402835291820191615288565b820191906000526020600020905b815481529060010190602001808311615274575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156152d157805182526020820191506020810190506020830392506152ac565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515615377576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807fe68b85e4bf9de59088e5908ce78ab6e68081e4b88de7aca6000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166008600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515615476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807fe4b88de698afe8afa5e68b85e4bf9de59088e5908ce5afb9e5ba94e79a84e68b81526020017f85e4bf9de4bc81e4b89a0000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8215615510576040805190810160405280600c81526020017fe5908ce6848fe68b85e4bf9d00000000000000000000000000000000000000008152506008600086815260200190815260200160002060030190805190602001906154db92919061dd82565b508160086000868152602001908152602001600020600401908051906020019061550692919061dd82565b50600190506155a0565b6040805190810160405280600c81526020017fe68b92e7bb9de68b85e4bf9d000000000000000000000000000000000000000081525060086000868152602001908152602001600020600301908051906020019061556f92919061dd82565b508160086000868152602001908152602001600020600401908051906020019061559a92919061dd82565b50600090505b9392505050565b6000606080600060606000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015494506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156156c95780601f1061569e576101008083540402835291602001916156c9565b820191906000526020600020905b8154815290600101906020018083116156ac57829003601f168201915b505050505093506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156157a55780601f1061577a576101008083540402835291602001916157a5565b820191906000526020600020905b81548152906001019060200180831161578857829003601f168201915b505050505092506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015491506000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156158c55780601f1061589a576101008083540402835291602001916158c5565b820191906000526020600020905b8154815290600101906020018083116158a857829003601f168201915b5050505050905091939590929450565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561596057602002820191906000526020600020905b81548152602001906001019080831161594c575b50505050509050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301549050919050565b600060405160200180807fe59088e6b395000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b602083101515615a2e5780518252602082019150602081019050602083039250615a09565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016040516020018082805460018160011615610100020316600290048015615afe5780601f10615adc576101008083540402835291820191615afe565b820191906000526020600020905b815481529060010190602001808311615aea575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515615b475780518252602082019150602081019050602083039250615b22565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515615b8457600080fd5b60405160200180807fe699aee9809ae4bc81e4b89a0000000000000000000000000000000000000000815250600c0190506040516020818303038152906040526040518082805190602001908083835b602083101515615bf95780518252602082019150602081019050602083039250615bd4565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040516020018082805460018160011615610100020316600290048015615cc95780601f10615ca7576101008083540402835291820191615cc9565b820191906000526020600020905b815481529060010190602001808311615cb5575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515615d125780518252602082019150602081019050602083039250615ced565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515615d4f57600080fd5b82156160685760405160200180807fe5be85e7adbee7bdb2000000000000000000000000000000000000000000000081525060090190506040516020818303038152906040526040518082805190602001908083835b602083101515615dca5780518252602082019150602081019050602083039250615da5565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916600e60008681526020019081526020016000206005016040516020018082805460018160011615610100020316600290048015615e6f5780601f10615e4d576101008083540402835291820191615e6f565b820191906000526020600020905b815481529060010190602001808311615e5b575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515615eb85780518252602082019150602081019050602083039250615e93565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515615f5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807fe59088e5908ce78ab6e68081e4b88de7aca6000000000000000000000000000081525060200191505060405180910390fd5b6040805190810160405280600c81526020017fe7adbee7bdb2e68890e58a9f0000000000000000000000000000000000000000815250600e60008681526020019081526020016000206005019080519060200190615fbd92919061dd82565b5081600e60008681526020019081526020016000206006019080519060200190","","1515616ffe5780518252602082019150602081019050602083039250616fd9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561703b57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166017600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156173055760176000888152602001908152602001600020600401549250828610156171925761713e6017600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601760008a815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688886177f8565b8560176000898152602001908152602001600020600501600082825401925050819055508460176000898152602001908152602001600020600701908051906020019061718c92919061dd82565b506172fc565b6040805190810160405280600981526020017fe5b7b2e8bf98e5ae8c00000000000000000000000000000000000000000000008152506017600089815260200190815260200160002060060190805190602001906171f192919061dd82565b506017600088815260200190815260200160002060050154830391506172856017600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16601760008a815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684886177f8565b826017600089815260200190815260200160002060050181905550846017600089815260200190815260200160002060070190805190602001906172ca92919061dd82565b50601760008881526020019081526020016000206003015490506172ed81616a37565b156172fb576001935061730a565b5b6001935061730a565b600093505b5050509392505050565b60006060806060806060869550600080600b60008a815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561742c5780601f106174015761010080835404028352916020019161742c565b820191906000526020600020905b81548152906001019060200180831161740f57829003601f168201915b50505050509450600080600b60008a815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561753e5780601f106175135761010080835404028352916020019161753e565b820191906000526020600020905b81548152906001019060200180831161752157829003601f168201915b50505050509350600b60008881526020019081526020016000206003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156175ef5780601f106175c4576101008083540402835291602001916175ef565b820191906000526020600020905b8154815290600101906020018083116175d257829003601f168201915b50505050509250600b60008881526020019081526020016000206004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156176a05780601f10617675576101008083540402835291602001916176a0565b820191906000526020600020905b81548152906001019060200180831161768357829003601f168201915b50505050509150600b60008881526020019081526020016000206005018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156177515780601f1061772657610100808354040283529160200191617751565b820191906000526020600020905b81548152906001019060200180831161773457829003601f168201915b5050505050905091939550919395565b6060601560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156177ec57602002820191906000526020600020905b8154815260200190600101908083116177d8575b50505050509050919050565b6000808311151561780857600080fd5b6001600480549050019050826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301541015151561786357600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550600481908060018154018082558091505090600182039060005260206000200160009091929091909150555060a0604051908101604052808281526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815250600160008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004019080519060200190617a8692919061dd02565b50905050826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008282540392505081905550826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600082825401925050819055505050505050565b6060600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015617bba57602002820191906000526020600020905b815481526020019060010190808311617ba6575b50505050509050919050565b60008060008060008060405160200180807fe59088e6b395000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b602083101515617c445780518252602082019150602081019050602083039250617c1f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016040516020018082805460018160011615610100020316600290048015617d145780601f10617cf2576101008083540402835291820191617d14565b820191906000526020600020905b815481529060010190602001808311617d00575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515617d5d5780518252602082019150602081019050602083039250617d38565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515617d9a57600080fd5b60405160200180807fe993b6e8a18c000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b602083101515617e0f5780518252602082019150602081019050602083039250617dea565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040516020018082805460018160011615610100020316600290048015617edf5780601f10617ebd576101008083540402835291820191617edf565b820191906000526020600020905b815481529060010190602001808311617ecb575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515617f285780518252602082019150602081019050602083039250617f03565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515617f6557600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16601460008c815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561803e576040517f08c379a00000000000","","","505050565b6000606080600080606080879650600080601160008b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561a0fb5780601f1061a0d05761010080835404028352916020019161a0fb565b820191906000526020600020905b81548152906001019060200180831161a0de57829003601f168201915b50505050509550600080601160008b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561a20d5780601f1061a1e25761010080835404028352916020019161a20d565b820191906000526020600020905b81548152906001019060200180831161a1f057829003601f168201915b505050505094506011600089815260200190815260200160002060030154935060116000898152602001908152602001600020600401549250601160008981526020019081526020016000206005018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561a2f05780601f1061a2c55761010080835404028352916020019161a2f0565b820191906000526020600020905b81548152906001019060200180831161a2d357829003601f168201915b50505050509150601160008981526020019081526020016000206006018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561a3a15780601f1061a3765761010080835404028352916020019161a3a1565b820191906000526020600020905b81548152906001019060200180831161a38457829003601f168201915b50505050509050919395979092949650565b600060405160200180807fe59088e6b395000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b60208310151561a42a578051825260208201915060208101905060208303925061a405565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401604051602001808280546001816001161561010002031660029004801561a4fa5780601f1061a4d857610100808354040283529182019161a4fa565b820191906000526020600020905b81548152906001019060200180831161a4e6575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561a543578051825260208201915060208101905060208303925061a51e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561a58057600080fd5b60405160200180807fe993b6e8a18c000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b60208310151561a5f5578051825260208201915060208101905060208303925061a5d0565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101604051602001808280546001816001161561010002031660029004801561a6c55780601f1061a6a357610100808354040283529182019161a6c5565b820191906000526020600020905b81548152906001019060200180831161a6b1575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561a70e578051825260208201915060208101905060208303925061a6e9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561a74b57600080fd5b60405160200180807fe5908ce6848fe5a794e689980000000000000000000000000000000000000000815250600c0190506040516020818303038152906040526040518082805190602001908083835b60208310151561a7c0578051825260208201915060208101905060208303925061a79b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660056000868152602001908152602001600020600301604051602001808280546001816001161561010002031660029004801561a8655780601f1061a84357610100808354040283529182019161a865565b820191906000526020600020905b81548152906001019060200180831161a851575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561a8ae578051825260208201915060208101905060208303925061a889565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561a954576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807fe5a794e68998e59088e5908ce78ab6e68081e4b88de7aca6000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166005600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561aa53576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807fe4b88de698afe8afa5e5a794e68998e59088e5908ce5afb9e5ba94e79a84e99381526020017fb6e8a18c0000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b811561aaed576040805190810160405280600c81526020017fe8a7a3e999a4e5a794e68998000000000000000000000000000000000000000081525060056000868152602001908152602001600020600301908051906020019061aab892919061dd82565b508260056000868152602001908152602001600020600401908051906020019061aae392919061dd82565b506001905061aaf2565b600090505b9392505050565b60006060806060808594506000806005600089815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561ac0f5780601f1061abe45761010080835404028352916020019161ac0f565b820191906000526020600020905b81548152906001019060200180831161abf257829003601f168201915b505050505093506000806005600089815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561ad215780601f1061acf65761010080835404028352916020019161ad21565b820191906000526020600020905b81548152906001019060200180831161ad0457829003601f168201915b50505050509250600560008781526020019081526020016000206003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561add25780601f1061ada75761010080835404028352916020019161add2565b820191906000526020600020905b81548152906001019060200180831161adb557829003601f168201915b50505050509150600560008781526020019081526020016000206004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561ae835780601f1061ae585761010080835404028352916020019161ae83565b820191906000526020600020905b81548152906001019060200180831161ae6657829003601f168201915b5050505050905091939590929450565b60008060405160200180807fe59088e6b395000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b60208310151561af0b578051825260208201915060208101905060208303925061aee6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401604051602001808280546001816001161561010002031660029004801561afdb5780601f1061afb957610100808354040283529182019161afdb565b820191906000526020600020905b81548152906001019060200180831161afc7575b5050","","60200190815260200160002060008201518160000155602082015181600101908051906020019061c00f92919061dd02565b50604082015181600201908051906020019061c02c92919061dd02565b5060608201518160030155608082015181600401908051906020019061c05392919061dd02565b5090505060038190806001815401808255809150509060018203906000526020600020016000909192909190915055505b50505050565b60008060405160200180807fe59088e6b395000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b60208310151561c102578051825260208201915060208101905060208303925061c0dd565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401604051602001808280546001816001161561010002031660029004801561c1d25780601f1061c1b057610100808354040283529182019161c1d2565b820191906000526020600020905b81548152906001019060200180831161c1be575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561c21b578051825260208201915060208101905060208303925061c1f6565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561c25857600080fd5b60405160200180807fe993b6e8a18c000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b60208310151561c2cd578051825260208201915060208101905060208303925061c2a8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101604051602001808280546001816001161561010002031660029004801561c39d5780601f1061c37b57610100808354040283529182019161c39d565b820191906000526020600020905b81548152906001019060200180831161c389575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561c3e6578051825260208201915060208101905060208303925061c3c1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561c42357600080fd5b60405160200180807fe59088e6b395000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b60208310151561c498578051825260208201915060208101905060208303925061c473565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401604051602001808280546001816001161561010002031660029004801561c5685780601f1061c54657610100808354040283529182019161c568565b820191906000526020600020905b81548152906001019060200180831161c554575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561c5b1578051825260208201915060208101905060208303925061c58c565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561c9b0576001600780549050019050600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550600781908060018154018082558091505090600182039060005260206000200160009091929091909150555060a0604051908101604052808281526020018573ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016040805190810160405280600f81526020017fe68f90e4baa4e5a794e68998e4b8ad0000000000000000000000000000000000815250815260200184815250600560008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019061c84192919061dd02565b50608082015181600401908051906020019061c85e92919061dd02565b509050507fd9727927a5345392bcff5fd74c482a6ac7498d5fd40bda3898e7f774a182240381853386604051808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001806020018381038352600f8152602001807fe68f90e4baa4e5a794e68998e4b8ad0000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b8381101561c96957808201518184015260208101905061c94e565b50505050905090810190601f16801561c9965780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a16001915061c9b5565b600091505b5092915050565b60006060806000806060806060889750600080601760008c815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561cad75780601f1061caac5761010080835404028352916020019161cad7565b820191906000526020600020905b81548152906001019060200180831161caba57829003601f168201915b50505050509650600080601760008c815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561cbe95780601f1061cbbe5761010080835404028352916020019161cbe9565b820191906000526020600020905b81548152906001019060200180831161cbcc57829003601f168201915b50505050509550601760008a8152602001908152602001600020600401549450601760008a8152602001908152602001600020600501549350601760008a81526020019081526020016000206006018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561cccc5780601f1061cca15761010080835404028352916020019161cccc565b820191906000526020600020905b81548152906001019060200180831161ccaf57829003601f168201915b50505050509250601760008a81526020019081526020016000206007018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561cd7d5780601f1061cd525761010080835404028352916020019161cd7d565b820191906000526020600020905b81548152906001019060200180831161cd6057829003601f168201915b50505050509150601760008a81526020019081526020016000206008018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561ce2e5780601f1061ce035761010080835404028352916020019161ce2e565b820191906000526020600020905b81548152906001019060200180831161ce1157829003601f168201915b50505050509050919395975091939597565b6000606080600080606080879650600080600e60008b815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561cf595780601f1061cf2e5761010080835404028352916020019161cf59565b820191906000526020600020905b81548152906001019060200180831161cf3c57829003601f168201915b50505050509550600080600e60008b815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201805460018160","0116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561d06b5780601f1061d0405761010080835404028352916020019161d06b565b820191906000526020600020905b81548152906001019060200180831161d04e57829003601f168201915b50505050509450600e6000898152602001908152602001600020600301549350600e6000898152602001908152602001600020600401549250600e60008981526020019081526020016000206005018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561d14e5780601f1061d1235761010080835404028352916020019161d14e565b820191906000526020600020905b81548152906001019060200180831161d13157829003601f168201915b50505050509150600e60008981526020019081526020016000206006018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561d1ff5780601f1061d1d45761010080835404028352916020019161d1ff565b820191906000526020600020905b81548152906001019060200180831161d1e257829003601f168201915b50505050509050919395979092949650565b60008060405160200180807fe59088e6b395000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b60208310151561d289578051825260208201915060208101905060208303925061d264565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401604051602001808280546001816001161561010002031660029004801561d3595780601f1061d33757610100808354040283529182019161d359565b820191906000526020600020905b81548152906001019060200180831161d345575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561d3a2578051825260208201915060208101905060208303925061d37d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561d3df57600080fd5b60405160200180807fe699aee9809ae4bc81e4b89a0000000000000000000000000000000000000000815250600c0190506040516020818303038152906040526040518082805190602001908083835b60208310151561d454578051825260208201915060208101905060208303925061d42f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101604051602001808280546001816001161561010002031660029004801561d5245780601f1061d50257610100808354040283529182019161d524565b820191906000526020600020905b81548152906001019060200180831161d510575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561d56d578051825260208201915060208101905060208303925061d548565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614151561d5aa57600080fd5b60405160200180807fe59088e6b395000000000000000000000000000000000000000000000000000081525060060190506040516020818303038152906040526040518082805190602001908083835b60208310151561d61f578051825260208201915060208101905060208303925061d5fa565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401604051602001808280546001816001161561010002031660029004801561d6ef5780601f1061d6cd57610100808354040283529182019161d6ef565b820191906000526020600020905b81548152906001019060200180831161d6db575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561d738578051825260208201915060208101905060208303925061d713565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141561dbc7576001600a80549050019050600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550600a81908060018154018082558091505090600182039060005260206000200160009091929091909150555060c0604051908101604052808281526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020016040805190810160405280600981526020017fe794b3e8afb7e4b8ad0000000000000000000000000000000000000000000000815250815260200185815260200184815250600860008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019061d9ce92919061dd02565b50608082015181600401908051906020019061d9eb92919061dd02565b5060a082015181600501908051906020019061da0892919061dd02565b509050507f5e2802a3c149ce79c271f6db4af0f9360bf2313c0dc667455cea2fdaa99824438133878787604051808681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845260098152602001807fe794b3e8afb7e4b8ad0000000000000000000000000000000000000000000000815250602001848103835286818151815260200191508051906020019080838360005b8381101561db1857808201518184015260208101905061dafd565b50505050905090810190601f16801561db455780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561db7e57808201518184015260208101905061db63565b50505050905090810190601f16801561dbab5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a16001915061dbcc565b600091505b509392505050565b6060600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561dc5f57602002820191906000526020600020905b81548152602001906001019080831161dc4b575b50505050509050919050565b6060601260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561dcf657602002820191906000526020600020905b81548152602001906001019080831161dce2575b50505050509050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061dd4357805160ff191683800117855561dd71565b8280016001018555821561dd71579182015b8281111561dd7057825182559160200191906001019061dd55565b5b50905061dd7e919061de02565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061ddc357805160ff191683800117855561ddf1565b8280016001018555821561ddf1579182015b8281111561ddf057825182559160200191906001019061ddd5565b5b50905061ddfe919061de02565b5090565b61de2491905b8082111561de2057600081600090555060010161de08565b5090565b905600a165627a7a723058204a863d988b48a99d9f316321c0e2b83e02c6e35c59f8ad0a89fbf4a4a66bf38b0029"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"displayTransferInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transport\",\"type\":\"address\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"updateTime\",\"type\":\"string\"}],\"name\":\"createRepository\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"displayloanApply\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"enterprise\",\"type\":\"string\"},{\"name\":\"bank\",\"type\":\"string\"},{\"name\":\"apID\",\"type\":\"uint256\"},{\"name\":\"coID\",\"type\":\"uint256\"},{\"name\":\"inID\",\"type\":\"uint256\"},{\"name\":\"valID\",\"type\":\"uint256\"},{\"name\":\"loMomey\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"updateTime\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"displaycollateral\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"enterprise\",\"type\":\"string\"},{\"name\":\"consigner\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"updateTime\",\"type\":\"string\"},{\"name\":\"endTime\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"agreeAppoint\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accNo\",\"type\":\"address\"}],\"name\":\"getMyCollateralIdList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"currentTime\",\"type\":\"string\"}],\"name\":\"removeCollateral\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"currentTime\",\"type\":\"string\"}],\"name\":\"agreeCollateral\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"pub\",\"type\":\"address\"}],\"name\":\"displayAccount\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"accType\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"bal\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accNo\",\"type\":\"address\"}],\"name\":\"getMyAppointIdList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accNo\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"agreeInventory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enterprise\",\"type\":\"address\"},{\"name\":\"reNo\",\"type\":\"uint256\"},{\"name\":\"reMomey\",\"type\":\"uint256\"},{\"name\":\"updateTime\",\"type\":\"string\"}],\"name\":\"createInventory\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"endLoan\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"RepayLoanRecipt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"displayRepository\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"holder\",\"type\":\"string\"},{\"name\":\"transport\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"updateTime\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accNo\",\"type\":\"address\"}],\"name\":\"getMyloanApply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"payer\",\"type\":\"address\"},{\"name\":\"payee\",\"type\":\"address\"},{\"name\":\"money\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"createTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accNo\",\"type\":\"address\"}],\"name\":\"getInventory\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"updateTime\",\"type\":\"string\"},{\"name\":\"dueTime\",\"type\":\"string\"}],\"name\":\"agreeLoanApply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"loanID\",\"type\":\"uint256\"},{\"name\":\"enterprise\",\"type\":\"address\"},{\"name\":\"bank\",\"type\":\"address\"},{\"name\":\"allMoney\",\"type\":\"uint256\"},{\"name\":\"updateTime\",\"type\":\"string\"},{\"name\":\"dueTime\",\"type\":\"string\"}],\"name\":\"createLoanRecipt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accNo\",\"type\":\"address\"}],\"name\":\"getmyTransferInfoIdList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bank\",\"type\":\"address\"},{\"name\":\"apID\",\"type\":\"uint256\"},{\"name\":\"coID\",\"type\":\"uint256\"},{\"name\":\"inID\",\"type\":\"uint256\"},{\"name\":\"valID\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"createloanApply\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"displayValueReport\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"transport\",\"type\":\"string\"},{\"name\":\"enterprise\",\"type\":\"string\"},{\"name\":\"reNo\",\"type\":\"uint256\"},{\"name\":\"valMomey\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"updateTime\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"removeAppoint\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"displayAppoint\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"logistics\",\"type\":\"string\"},{\"name\":\"bank\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"updateTime\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"enterprise\",\"type\":\"address\"},{\"name\":\"reNo\",\"type\":\"uint256\"},{\"name\":\"valMomey\",\"type\":\"uint256\"},{\"name\":\"updateTime\",\"type\":\"string\"}],\"name\":\"createValueReport\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"displayAccountList\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"},{\"name\":\"choice\",\"type\":\"bool\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"removeInventory\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accNo\",\"type\":\"address\"}],\"name\":\"getMyLoanList\",\"outputs\":[{","\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accType\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"bal\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"logistics\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"createAppoint\",\"outputs\":[{\"name\":\"res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"displayLoanRecipt\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"enterprise\",\"type\":\"string\"},{\"name\":\"bank\",\"type\":\"string\"},{\"name\":\"allMoney\",\"type\":\"uint256\"},{\"name\":\"reMoney\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"updateTime\",\"type\":\"string\"},{\"name\":\"dueTime\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"no\",\"type\":\"uint256\"}],\"name\":\"displayInventory\",\"outputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"enterprise\",\"type\":\"string\"},{\"name\":\"transport\",\"type\":\"string\"},{\"name\":\"reNo\",\"type\":\"uint256\"},{\"name\":\"reMomey\",\"type\":\"uint256\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"updateTime\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"consigner\",\"type\":\"address\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"endTime\",\"type\":\"string\"}],\"name\":\"createCollateral\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accNo\",\"type\":\"address\"}],\"name\":\"getMyrepository\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"accNo\",\"type\":\"address\"}],\"name\":\"getMyValueReport\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"logistics\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bank\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updateTime\",\"type\":\"string\"}],\"name\":\"createAppointEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"logistics\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bank\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updateTime\",\"type\":\"string\"}],\"name\":\"agreeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"consigner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updateTime\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"string\"}],\"name\":\"createCollateralEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transport\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updateTime\",\"type\":\"string\"}],\"name\":\"createRepositoryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"no\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"transport\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reMomey\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updateTime\",\"type\":\"string\"}],\"name\":\"createInventoryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"transport\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"reNo\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"valMomey\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updateTime\",\"type\":\"string\"}],\"name\":\"createReportEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bank\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"apID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"coID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"inID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"valID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"loMomey\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updateTime\",\"type\":\"string\"}],\"name\":\"loanApplyEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"enterprise\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"bank\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"loanID\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"allMoney\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"reMoney\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"updateTime\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"dueTime\",\"type\":\"string\"}],\"name\":\"createLoanReciptEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_DISPLAYTRANSFERINFO = "displayTransferInfo";

    public static final String FUNC_CREATEREPOSITORY = "createRepository";

    public static final String FUNC_DISPLAYLOANAPPLY = "displayloanApply";

    public static final String FUNC_DISPLAYCOLLATERAL = "displaycollateral";

    public static final String FUNC_AGREEAPPOINT = "agreeAppoint";

    public static final String FUNC_GETMYCOLLATERALIDLIST = "getMyCollateralIdList";

    public static final String FUNC_REMOVECOLLATERAL = "removeCollateral";

    public static final String FUNC_AGREECOLLATERAL = "agreeCollateral";

    public static final String FUNC_DISPLAYACCOUNT = "displayAccount";

    public static final String FUNC_GETMYAPPOINTIDLIST = "getMyAppointIdList";

    public static final String FUNC_CHECKBALANCE = "checkBalance";

    public static final String FUNC_AGREEINVENTORY = "agreeInventory";

    public static final String FUNC_CREATEINVENTORY = "createInventory";

    public static final String FUNC_ENDLOAN = "endLoan";

    public static final String FUNC_REPAYLOANRECIPT = "RepayLoanRecipt";

    public static final String FUNC_DISPLAYREPOSITORY = "displayRepository";

    public static final String FUNC_GETMYLOANAPPLY = "getMyloanApply";

    public static final String FUNC_CREATETRANSFER = "createTransfer";

    public static final String FUNC_GETINVENTORY = "getInventory";

    public static final String FUNC_AGREELOANAPPLY = "agreeLoanApply";

    public static final String FUNC_CREATELOANRECIPT = "createLoanRecipt";

    public static final String FUNC_GETMYTRANSFERINFOIDLIST = "getmyTransferInfoIdList";

    public static final String FUNC_CREATELOANAPPLY = "createloanApply";

    public static final String FUNC_DISPLAYVALUEREPORT = "displayValueReport";

    public static final String FUNC_REMOVEAPPOINT = "removeAppoint";

    public static final String FUNC_DISPLAYAPPOINT = "displayAppoint";

    public static final String FUNC_CREATEVALUEREPORT = "createValueReport";

    public static final String FUNC_DISPLAYACCOUNTLIST = "displayAccountList";

    public static final String FUNC_REMOVEINVENTORY = "removeInventory";

    public static final String FUNC_GETMYLOANLIST = "getMyLoanList";

    public static final String FUNC_CREATEACCOUNT = "createAccount";

    public static final String FUNC_CREATEAPPOINT = "createAppoint";

    public static final String FUNC_DISPLAYLOANRECIPT = "displayLoanRecipt";

    public static final String FUNC_DISPLAYINVENTORY = "displayInventory";

    public static final String FUNC_CREATECOLLATERAL = "createCollateral";

    public static final String FUNC_GETMYREPOSITORY = "getMyrepository";

    public static final String FUNC_GETMYVALUEREPORT = "getMyValueReport";

    public static final Event CREATEAPPOINTEVENT_EVENT = new Event("createAppointEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event AGREEEVENT_EVENT = new Event("agreeEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATECOLLATERALEVENT_EVENT = new Event("createCollateralEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATEREPOSITORYEVENT_EVENT = new Event("createRepositoryEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATEINVENTORYEVENT_EVENT = new Event("createInventoryEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATEREPORTEVENT_EVENT = new Event("createReportEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event LOANAPPLYEVENT_EVENT = new Event("loanApplyEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event CREATELOANRECIPTEVENT_EVENT = new Event("createLoanReciptEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected Test3(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Test3(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Test3(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Test3(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<Tuple5<BigInteger, String, String, BigInteger, String>> displayTransferInfo(BigInteger no) {
        final Function function = new Function(FUNC_DISPLAYTRANSFERINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, String, BigInteger, String>>(
                new Callable<Tuple5<BigInteger, String, String, BigInteger, String>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createRepository(String transport, String text, String updateTime) {
        final Function function = new Function(
                FUNC_CREATEREPOSITORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(transport), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(text), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createRepository(String transport, String text, String updateTime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEREPOSITORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(transport), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(text), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createRepositorySeq(String transport, String text, String updateTime) {
        final Function function = new Function(
                FUNC_CREATEREPOSITORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(transport), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(text), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, String> getCreateRepositoryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEREPOSITORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getCreateRepositoryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEREPOSITORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> displayloanApply(BigInteger no) {
        final Function function = new Function(
                FUNC_DISPLAYLOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void displayloanApply(BigInteger no, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DISPLAYLOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String displayloanApplySeq(BigInteger no) {
        final Function function = new Function(
                FUNC_DISPLAYLOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getDisplayloanApplyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DISPLAYLOANAPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple10<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, String> getDisplayloanApplyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DISPLAYLOANAPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple10<BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue(), 
                (BigInteger) results.get(6).getValue(), 
                (BigInteger) results.get(7).getValue(), 
                (String) results.get(8).getValue(), 
                (String) results.get(9).getValue()
                );
    }

    public RemoteCall<Tuple6<BigInteger, String, String, String, String, String>> displaycollateral(BigInteger no) {
        final Function function = new Function(FUNC_DISPLAYCOLLATERAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<BigInteger, String, String, String, String, String>>(
                new Callable<Tuple6<BigInteger, String, String, String, String, String>>() {
                    @Override
                    public Tuple6<BigInteger, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, String, String, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> agreeAppoint(BigInteger no, String time, Boolean choice) {
        final Function function = new Function(
                FUNC_AGREEAPPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void agreeAppoint(BigInteger no, String time, Boolean choice, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_AGREEAPPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String agreeAppointSeq(BigInteger no, String time, Boolean choice) {
        final Function function = new Function(
                FUNC_AGREEAPPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, String, Boolean> getAgreeAppointInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AGREEAPPOINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, String, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getAgreeAppointOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_AGREEAPPOINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<List> getMyCollateralIdList(String accNo) {
        final Function function = new Function(FUNC_GETMYCOLLATERALIDLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> removeCollateral(BigInteger no, Boolean choice, String currentTime) {
        final Function function = new Function(
                FUNC_REMOVECOLLATERAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void removeCollateral(BigInteger no, Boolean choice, String currentTime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REMOVECOLLATERAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentTime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String removeCollateralSeq(BigInteger no, Boolean choice, String currentTime) {
        final Function function = new Function(
                FUNC_REMOVECOLLATERAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentTime)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, Boolean, String> getRemoveCollateralInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVECOLLATERAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, Boolean, String>(

                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveCollateralOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVECOLLATERAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> agreeCollateral(BigInteger no, Boolean choice, String currentTime) {
        final Function function = new Function(
                FUNC_AGREECOLLATERAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void agreeCollateral(BigInteger no, Boolean choice, String currentTime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_AGREECOLLATERAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentTime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String agreeCollateralSeq(BigInteger no, Boolean choice, String currentTime) {
        final Function function = new Function(
                FUNC_AGREECOLLATERAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(currentTime)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, Boolean, String> getAgreeCollateralInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AGREECOLLATERAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, Boolean, String>(

                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getAgreeCollateralOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_AGREECOLLATERAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple5<BigInteger, String, String, BigInteger, String>> displayAccount(String pub) {
        final Function function = new Function(FUNC_DISPLAYACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(pub)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, String, BigInteger, String>>(
                new Callable<Tuple5<BigInteger, String, String, BigInteger, String>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<List> getMyAppointIdList(String accNo) {
        final Function function = new Function(FUNC_GETMYAPPOINTIDLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<BigInteger> checkBalance(String accNo) {
        final Function function = new Function(FUNC_CHECKBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> agreeInventory(BigInteger no, Boolean choice, String time) {
        final Function function = new Function(
                FUNC_AGREEINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void agreeInventory(BigInteger no, Boolean choice, String time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_AGREEINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String agreeInventorySeq(BigInteger no, Boolean choice, String time) {
        final Function function = new Function(
                FUNC_AGREEINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, Boolean, String> getAgreeInventoryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AGREEINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, Boolean, String>(

                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getAgreeInventoryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_AGREEINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> createInventory(String enterprise, BigInteger reNo, BigInteger reMomey, String updateTime) {
        final Function function = new Function(
                FUNC_CREATEINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(reNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(reMomey), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createInventory(String enterprise, BigInteger reNo, BigInteger reMomey, String updateTime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(reNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(reMomey), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createInventorySeq(String enterprise, BigInteger reNo, BigInteger reMomey, String updateTime) {
        final Function function = new Function(
                FUNC_CREATEINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(reNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(reMomey), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, BigInteger, BigInteger, String> getCreateInventoryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<Boolean> getCreateInventoryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> endLoan(BigInteger no) {
        final Function function = new Function(
                FUNC_ENDLOAN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void endLoan(BigInteger no, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ENDLOAN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String endLoanSeq(BigInteger no) {
        final Function function = new Function(
                FUNC_ENDLOAN, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getEndLoanInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ENDLOAN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getEndLoanOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ENDLOAN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> RepayLoanRecipt(BigInteger no, BigInteger money, String time) {
        final Function function = new Function(
                FUNC_REPAYLOANRECIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void RepayLoanRecipt(BigInteger no, BigInteger money, String time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REPAYLOANRECIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String RepayLoanReciptSeq(BigInteger no, BigInteger money, String time) {
        final Function function = new Function(
                FUNC_REPAYLOANRECIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, BigInteger, String> getRepayLoanReciptInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REPAYLOANRECIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getRepayLoanReciptOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REPAYLOANRECIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple6<BigInteger, String, String, String, String, String>> displayRepository(BigInteger no) {
        final Function function = new Function(FUNC_DISPLAYREPOSITORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple6<BigInteger, String, String, String, String, String>>(
                new Callable<Tuple6<BigInteger, String, String, String, String, String>>() {
                    @Override
                    public Tuple6<BigInteger, String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, String, String, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (String) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> getMyloanApply(String accNo) {
        final Function function = new Function(
                FUNC_GETMYLOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getMyloanApply(String accNo, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETMYLOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getMyloanApplySeq(String accNo) {
        final Function function = new Function(
                FUNC_GETMYLOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getGetMyloanApplyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETMYLOANAPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<List<BigInteger>> getGetMyloanApplyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETMYLOANAPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue())
                );
    }

    public RemoteCall<TransactionReceipt> createTransfer(String payer, String payee, BigInteger money, String time) {
        final Function function = new Function(
                FUNC_CREATETRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(payer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(payee), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createTransfer(String payer, String payee, BigInteger money, String time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATETRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(payer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(payee), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createTransferSeq(String payer, String payee, BigInteger money, String time) {
        final Function function = new Function(
                FUNC_CREATETRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(payer), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(payee), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(money), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, BigInteger, String> getCreateTransferInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATETRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, String, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> getInventory(String accNo) {
        final Function function = new Function(
                FUNC_GETINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getInventory(String accNo, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getInventorySeq(String accNo) {
        final Function function = new Function(
                FUNC_GETINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getGetInventoryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<List<BigInteger>> getGetInventoryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue())
                );
    }

    public RemoteCall<TransactionReceipt> agreeLoanApply(BigInteger no, Boolean choice, String updateTime, String dueTime) {
        final Function function = new Function(
                FUNC_AGREELOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(dueTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void agreeLoanApply(BigInteger no, Boolean choice, String updateTime, String dueTime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_AGREELOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(dueTime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String agreeLoanApplySeq(BigInteger no, Boolean choice, String updateTime, String dueTime) {
        final Function function = new Function(
                FUNC_AGREELOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(dueTime)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<BigInteger, Boolean, String, String> getAgreeLoanApplyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AGREELOANAPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<BigInteger, Boolean, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<Boolean> getAgreeLoanApplyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_AGREELOANAPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> createLoanRecipt(BigInteger loanID, String enterprise, String bank, BigInteger allMoney, String updateTime, String dueTime) {
        final Function function = new Function(
                FUNC_CREATELOANRECIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(loanID), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(bank), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(allMoney), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(dueTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createLoanRecipt(BigInteger loanID, String enterprise, String bank, BigInteger allMoney, String updateTime, String dueTime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATELOANRECIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(loanID), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(bank), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(allMoney), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(dueTime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createLoanReciptSeq(BigInteger loanID, String enterprise, String bank, BigInteger allMoney, String updateTime, String dueTime) {
        final Function function = new Function(
                FUNC_CREATELOANRECIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(loanID), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(bank), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(allMoney), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(dueTime)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple6<BigInteger, String, String, BigInteger, String, String> getCreateLoanReciptInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATELOANRECIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple6<BigInteger, String, String, BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public Tuple1<Boolean> getCreateLoanReciptOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATELOANRECIPT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<List> getmyTransferInfoIdList(String accNo) {
        final Function function = new Function(FUNC_GETMYTRANSFERINFOIDLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createloanApply(String bank, BigInteger apID, BigInteger coID, BigInteger inID, BigInteger valID, String time) {
        final Function function = new Function(
                FUNC_CREATELOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(bank), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(apID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(coID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(inID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(valID), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createloanApply(String bank, BigInteger apID, BigInteger coID, BigInteger inID, BigInteger valID, String time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATELOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(bank), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(apID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(coID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(inID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(valID), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createloanApplySeq(String bank, BigInteger apID, BigInteger coID, BigInteger inID, BigInteger valID, String time) {
        final Function function = new Function(
                FUNC_CREATELOANAPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(bank), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(apID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(coID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(inID), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(valID), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, String> getCreateloanApplyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATELOANAPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple6<String, BigInteger, BigInteger, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (String) results.get(5).getValue()
                );
    }

    public Tuple1<Boolean> getCreateloanApplyOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATELOANAPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String>> displayValueReport(BigInteger no) {
        final Function function = new Function(FUNC_DISPLAYVALUEREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String>>(
                new Callable<Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> removeAppoint(BigInteger no, String time, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEAPPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void removeAppoint(BigInteger no, String time, Boolean choice, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEAPPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String removeAppointSeq(BigInteger no, String time, Boolean choice) {
        final Function function = new Function(
                FUNC_REMOVEAPPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, String, Boolean> getRemoveAppointInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEAPPOINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, String, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (Boolean) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveAppointOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEAPPOINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple5<BigInteger, String, String, String, String>> displayAppoint(BigInteger no) {
        final Function function = new Function(FUNC_DISPLAYAPPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, String, String, String>>(
                new Callable<Tuple5<BigInteger, String, String, String, String>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createValueReport(String enterprise, BigInteger reNo, BigInteger valMomey, String updateTime) {
        final Function function = new Function(
                FUNC_CREATEVALUEREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(reNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(valMomey), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createValueReport(String enterprise, BigInteger reNo, BigInteger valMomey, String updateTime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEVALUEREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(reNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(valMomey), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createValueReportSeq(String enterprise, BigInteger reNo, BigInteger valMomey, String updateTime) {
        final Function function = new Function(
                FUNC_CREATEVALUEREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(enterprise), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(reNo), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(valMomey), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(updateTime)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, BigInteger, BigInteger, String> getCreateValueReportInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEVALUEREPORT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, BigInteger, BigInteger, String>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public Tuple1<Boolean> getCreateValueReportOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEVALUEREPORT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<BigInteger> displayAccountList(BigInteger no) {
        final Function function = new Function(FUNC_DISPLAYACCOUNTLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> removeInventory(BigInteger no, Boolean choice, String time) {
        final Function function = new Function(
                FUNC_REMOVEINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void removeInventory(BigInteger no, Boolean choice, String time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String removeInventorySeq(BigInteger no, Boolean choice, String time) {
        final Function function = new Function(
                FUNC_REMOVEINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no), 
                new org.fisco.bcos.web3j.abi.datatypes.Bool(choice), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<BigInteger, Boolean, String> getRemoveInventoryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<BigInteger, Boolean, String>(

                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveInventoryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<List> getMyLoanList(String accNo) {
        final Function function = new Function(FUNC_GETMYLOANLIST, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> createAccount(String accType, String name, BigInteger bal) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(accType), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(bal)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createAccount(String accType, String name, BigInteger bal, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(accType), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(bal)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createAccountSeq(String accType, String name, BigInteger bal) {
        final Function function = new Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(accType), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(bal)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, BigInteger> getCreateAccountInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> createAppoint(String logistics, String time) {
        final Function function = new Function(
                FUNC_CREATEAPPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(logistics), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createAppoint(String logistics, String time, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATEAPPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(logistics), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createAppointSeq(String logistics, String time) {
        final Function function = new Function(
                FUNC_CREATEAPPOINT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(logistics), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getCreateAppointInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEAPPOINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getCreateAppointOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEAPPOINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<Tuple8<BigInteger, String, String, BigInteger, BigInteger, String, String, String>> displayLoanRecipt(BigInteger no) {
        final Function function = new Function(FUNC_DISPLAYLOANRECIPT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple8<BigInteger, String, String, BigInteger, BigInteger, String, String, String>>(
                new Callable<Tuple8<BigInteger, String, String, BigInteger, BigInteger, String, String, String>>() {
                    @Override
                    public Tuple8<BigInteger, String, String, BigInteger, BigInteger, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, String, String, BigInteger, BigInteger, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> displayInventory(BigInteger no) {
        final Function function = new Function(
                FUNC_DISPLAYINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void displayInventory(BigInteger no, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DISPLAYINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String displayInventorySeq(BigInteger no) {
        final Function function = new Function(
                FUNC_DISPLAYINVENTORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(no)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getDisplayInventoryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DISPLAYINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String> getDisplayInventoryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DISPLAYINVENTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple7<BigInteger, String, String, BigInteger, BigInteger, String, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue(), 
                (String) results.get(5).getValue(), 
                (String) results.get(6).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> createCollateral(String consigner, String time, String endTime) {
        final Function function = new Function(
                FUNC_CREATECOLLATERAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(consigner), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(endTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void createCollateral(String consigner, String time, String endTime, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CREATECOLLATERAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(consigner), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(endTime)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String createCollateralSeq(String consigner, String time, String endTime) {
        final Function function = new Function(
                FUNC_CREATECOLLATERAL, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(consigner), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(time), 
                new org.fisco.bcos.web3j.abi.datatypes.Utf8String(endTime)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple3<String, String, String> getCreateCollateralInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATECOLLATERAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getCreateCollateralOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATECOLLATERAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public RemoteCall<TransactionReceipt> getMyrepository(String accNo) {
        final Function function = new Function(
                FUNC_GETMYREPOSITORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getMyrepository(String accNo, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETMYREPOSITORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getMyrepositorySeq(String accNo) {
        final Function function = new Function(
                FUNC_GETMYREPOSITORY, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getGetMyrepositoryInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETMYREPOSITORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<List<BigInteger>> getGetMyrepositoryOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETMYREPOSITORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue())
                );
    }

    public RemoteCall<TransactionReceipt> getMyValueReport(String accNo) {
        final Function function = new Function(
                FUNC_GETMYVALUEREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void getMyValueReport(String accNo, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_GETMYVALUEREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getMyValueReportSeq(String accNo) {
        final Function function = new Function(
                FUNC_GETMYVALUEREPORT, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Address(accNo)), 
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getGetMyValueReportInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_GETMYVALUEREPORT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<List<BigInteger>> getGetMyValueReportOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETMYVALUEREPORT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue())
                );
    }

    public List<CreateAppointEventEventResponse> getCreateAppointEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEAPPOINTEVENT_EVENT, transactionReceipt);
        ArrayList<CreateAppointEventEventResponse> responses = new ArrayList<CreateAppointEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateAppointEventEventResponse typedResponse = new CreateAppointEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.logistics = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.bank = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.updateTime = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registercreateAppointEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATEAPPOINTEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registercreateAppointEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATEAPPOINTEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<AgreeEventEventResponse> getAgreeEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(AGREEEVENT_EVENT, transactionReceipt);
        ArrayList<AgreeEventEventResponse> responses = new ArrayList<AgreeEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AgreeEventEventResponse typedResponse = new AgreeEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.logistics = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.bank = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.updateTime = (String) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registeragreeEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(AGREEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registeragreeEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(AGREEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<CreateCollateralEventEventResponse> getCreateCollateralEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATECOLLATERALEVENT_EVENT, transactionReceipt);
        ArrayList<CreateCollateralEventEventResponse> responses = new ArrayList<CreateCollateralEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateCollateralEventEventResponse typedResponse = new CreateCollateralEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.enterprise = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.consigner = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.updateTime = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.endTime = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registercreateCollateralEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATECOLLATERALEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registercreateCollateralEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATECOLLATERALEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<CreateRepositoryEventEventResponse> getCreateRepositoryEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEREPOSITORYEVENT_EVENT, transactionReceipt);
        ArrayList<CreateRepositoryEventEventResponse> responses = new ArrayList<CreateRepositoryEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateRepositoryEventEventResponse typedResponse = new CreateRepositoryEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.holder = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.transport = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.text = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.updateTime = (String) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registercreateRepositoryEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATEREPOSITORYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registercreateRepositoryEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATEREPOSITORYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<CreateInventoryEventEventResponse> getCreateInventoryEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEINVENTORYEVENT_EVENT, transactionReceipt);
        ArrayList<CreateInventoryEventEventResponse> responses = new ArrayList<CreateInventoryEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateInventoryEventEventResponse typedResponse = new CreateInventoryEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.no = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.enterprise = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.transport = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reNo = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.reMomey = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.updateTime = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registercreateInventoryEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATEINVENTORYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registercreateInventoryEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATEINVENTORYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<CreateReportEventEventResponse> getCreateReportEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEREPORTEVENT_EVENT, transactionReceipt);
        ArrayList<CreateReportEventEventResponse> responses = new ArrayList<CreateReportEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateReportEventEventResponse typedResponse = new CreateReportEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.transport = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.enterprise = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.reNo = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.valMomey = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.updateTime = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registercreateReportEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATEREPORTEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registercreateReportEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATEREPORTEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<LoanApplyEventEventResponse> getLoanApplyEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOANAPPLYEVENT_EVENT, transactionReceipt);
        ArrayList<LoanApplyEventEventResponse> responses = new ArrayList<LoanApplyEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LoanApplyEventEventResponse typedResponse = new LoanApplyEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ID = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.enterprise = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.bank = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.apID = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.coID = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.inID = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.valID = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.loMomey = (BigInteger) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.updateTime = (String) eventValues.getNonIndexedValues().get(9).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerloanApplyEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOANAPPLYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerloanApplyEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(LOANAPPLYEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<CreateLoanReciptEventEventResponse> getCreateLoanReciptEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATELOANRECIPTEVENT_EVENT, transactionReceipt);
        ArrayList<CreateLoanReciptEventEventResponse> responses = new ArrayList<CreateLoanReciptEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateLoanReciptEventEventResponse typedResponse = new CreateLoanReciptEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.enterprise = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.bank = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.loanID = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.allMoney = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.reMoney = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.status = (String) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.updateTime = (String) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.dueTime = (String) eventValues.getNonIndexedValues().get(8).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registercreateLoanReciptEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATELOANRECIPTEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registercreateLoanReciptEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CREATELOANRECIPTEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static Test3 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Test3(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Test3 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Test3(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Test3 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Test3(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Test3 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Test3(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Test3> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Test3.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Test3> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Test3.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Test3> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Test3.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Test3> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Test3.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class CreateAppointEventEventResponse {
        public Log log;

        public BigInteger ID;

        public String logistics;

        public String bank;

        public String status;

        public String updateTime;
    }

    public static class AgreeEventEventResponse {
        public Log log;

        public BigInteger ID;

        public String logistics;

        public String bank;

        public String status;

        public String updateTime;
    }

    public static class CreateCollateralEventEventResponse {
        public Log log;

        public BigInteger ID;

        public String enterprise;

        public String consigner;

        public String status;

        public String updateTime;

        public String endTime;
    }

    public static class CreateRepositoryEventEventResponse {
        public Log log;

        public BigInteger id;

        public String holder;

        public String transport;

        public String text;

        public String status;

        public String updateTime;
    }

    public static class CreateInventoryEventEventResponse {
        public Log log;

        public BigInteger no;

        public String enterprise;

        public String transport;

        public BigInteger reNo;

        public BigInteger reMomey;

        public String status;

        public String updateTime;
    }

    public static class CreateReportEventEventResponse {
        public Log log;

        public BigInteger ID;

        public String transport;

        public String enterprise;

        public BigInteger reNo;

        public BigInteger valMomey;

        public String status;

        public String updateTime;
    }

    public static class LoanApplyEventEventResponse {
        public Log log;

        public BigInteger ID;

        public String enterprise;

        public String bank;

        public BigInteger apID;

        public BigInteger coID;

        public BigInteger inID;

        public BigInteger valID;

        public BigInteger loMomey;

        public String status;

        public String updateTime;
    }

    public static class CreateLoanReciptEventEventResponse {
        public Log log;

        public BigInteger id;

        public String enterprise;

        public String bank;

        public BigInteger loanID;

        public BigInteger allMoney;

        public BigInteger reMoney;

        public String status;

        public String updateTime;

        public String dueTime;
    }
}
